// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

contract MediTrust {
    struct Record {
        address patient;
        string cid;
        string description;
        uint256 timestamp;
    }

    // make global records list private to reduce accidental data exposure via autogenerated getter
    Record[] private records;
    mapping(address => Record[]) private patientRecords;

    // patient => viewer => read allowed
    mapping(address => mapping(address => bool)) private readAccess;

    event RecordStored(address indexed patient, string cid, string description, uint256 timestamp);
    event AccessGranted(address indexed patient, address indexed viewer);
    event AccessRevoked(address indexed patient, address indexed viewer);

    function storeRecord(address _patient, string memory _cid, string memory _desc) public {
        Record memory newRecord = Record(_patient, _cid, _desc, block.timestamp);
        patientRecords[_patient].push(newRecord);
        records.push(newRecord);
        emit RecordStored(_patient, _cid, _desc, block.timestamp);
    }

    // Backwards compatible getter (no checks). UI should prefer getRecordsAuthorized for privacy.
    function getRecords(address _patient) public view returns (Record[] memory) {
        return patientRecords[_patient];
    }

    // Authorization APIs
    function grantReadAccess(address viewer) external {
        readAccess[msg.sender][viewer] = true;
        emit AccessGranted(msg.sender, viewer);
    }

    function revokeReadAccess(address viewer) external {
        readAccess[msg.sender][viewer] = false;
        emit AccessRevoked(msg.sender, viewer);
    }

    function hasReadAccess(address patient, address viewer) public view returns (bool) {
        return readAccess[patient][viewer];
    }

    function getRecordsAuthorized(address patient) external view returns (Record[] memory) {
        require(
            msg.sender == patient || hasReadAccess(patient, msg.sender),
            "Not authorized"
        );
        return patientRecords[patient];
    }
}
